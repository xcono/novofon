name: Novofon Documentation Generator

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
        
    - name: Checkout Novofon documentation repository
      run: |
        git clone https://github.com/novofon/novofon.github.io.git temp-html
        
    - name: Build converter tool
      run: |
        cd bin/api
        make build
        
    - name: Generate OpenAPI specs for Data API
      run: |
        mkdir -p api/data
        ./bin/api/converter temp-html/data_api api/data
        
    - name: Generate OpenAPI specs for Call API
      run: |
        mkdir -p api/calls
        ./bin/api/converter temp-html/call_api api/calls
          
    - name: Validate OpenAPI specifications
      timeout-minutes: 10
      run: |
        echo "Validating generated OpenAPI specifications..."
        
        # Check that files were generated
        if [ ! -d "api/data" ] || [ ! -d "api/calls" ]; then
          echo "❌ Output directories not found"
          exit 1
        fi
        
        # Count generated files
        data_count=$(find api/data -name "*.yaml" | wc -l)
        calls_count=$(find api/calls -name "*.yaml" | wc -l)
        
        echo "Generated files:"
        echo "- Data API: $data_count files"
        echo "- Call API: $calls_count files"
        
        if [ "$data_count" -eq 0 ] || [ "$calls_count" -eq 0 ]; then
          echo "❌ No OpenAPI files generated"
          exit 1
        fi
        
        echo "✅ OpenAPI validation completed successfully"
          
    # Note: Markdown conversion removed - focusing only on OpenAPI generation
          
    - name: Clean up temporary files
      run: |
        rm -rf temp-html
        
    - name: Validate generated files
      run: |
        echo "Generated files:"
        find api -name "*.yaml" | head -20
        echo "Total files:"
        find api -name "*.yaml" | wc -l
        echo "Directory structure:"
        ls -la api/ || echo "api/ directory not found"
        ls -la api/data/ || echo "api/data/ directory not found"
        ls -la api/calls/ || echo "api/calls/ directory not found"
        
        echo "Sample generated files:"
        echo "Data API files:"
        ls api/data/*.yaml | head -5 || echo "No files found in api/data/"
        echo "Call API files:"
        ls api/calls/*.yaml | head -5 || echo "No files found in api/calls/"
        
        echo "OpenAPI validation status:"
        if [ -d "api" ] && [ "$(find api -name "*.yaml" | wc -l)" -gt 0 ]; then
          echo "✅ OpenAPI specifications generated and validated"
        else
          echo "❌ No OpenAPI specifications found"
        fi
        
    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "Files changed:"
          git status --porcelain
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "No files changed"
        fi
        
    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add api/
        git commit -m "Auto-generate Novofon OpenAPI specifications
        
        - Generated OpenAPI specs for Data and Call APIs from HTML documentation
        - Converted HTML documentation to OpenAPI 3.0 format
        - Organized specs in api/data and api/calls directories"
        git push
        
    - name: Create summary
      run: |
        echo "## OpenAPI Generation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Generated Files:" >> $GITHUB_STEP_SUMMARY
        echo "- **OpenAPI Specs:** $(find api -name "*.yaml" 2>/dev/null | wc -l) files" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### API Coverage:" >> $GITHUB_STEP_SUMMARY
        echo "- **Data API:** $(find api/data -name "*.yaml" 2>/dev/null | wc -l) endpoints" >> $GITHUB_STEP_SUMMARY
        echo "- **Call API:** $(find api/calls -name "*.yaml" 2>/dev/null | wc -l) endpoints" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Output Structure:" >> $GITHUB_STEP_SUMMARY
        echo "- **OpenAPI specs:** Organized in \`api/data\` and \`api/calls\` directories" >> $GITHUB_STEP_SUMMARY
        echo "- **Format:** OpenAPI 3.0 YAML specifications" >> $GITHUB_STEP_SUMMARY
        echo "- **Source:** HTML documentation from novofon.github.io" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Sample Files:" >> $GITHUB_STEP_SUMMARY
        echo "**Data API:**" >> $GITHUB_STEP_SUMMARY
        ls api/data/*.yaml | head -5 | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Call API:**" >> $GITHUB_STEP_SUMMARY
        ls api/calls/*.yaml | head -5 | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Directory Structure:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        if command -v tree >/dev/null 2>&1; then
          tree api | head -20 >> $GITHUB_STEP_SUMMARY
        else
          find api -type d | head -20 >> $GITHUB_STEP_SUMMARY
        fi
        echo '```' >> $GITHUB_STEP_SUMMARY